<?php

namespace App\Tests\Controller;

use App\Entity\Link as LinkEntity;
use App\Link\Command\Add;
use App\Link\DTO\Link as LinkDTO;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class LinkControllerTest extends WebTestCase
{
    private ?Add $addCommand;
    private ?EntityManagerInterface $em;
    private ?KernelBrowser $client;

    protected function setUp(): void
    {
        parent::setUp();

        $this->client = static::createClient();
        $this->addCommand = static::getContainer()->get(Add::class);
        $this->em = static::getContainer()
            ->get('doctrine')
            ->getManager();
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->client = null;
        $this->addCommand = null;
        $this->em = null;
    }

    public function testListActionReturnsLinksList()
    {
        $em = $this->em;

        $dto = new LinkDTO();
        $dto->setUrl('https://google.com');
        $dto->setTitle('Title');

        $link = $this->addCommand->add($dto);

        $this->client->request(Request::METHOD_GET, '/links');

        $link = $em->find(LinkEntity::class, $link->getId());
        if ($link) {
            $em->remove($link);
            $em->flush();
        }

        $response = $this->client->getResponse();
        $data = \json_decode($response->getContent(), true);

        $this->assertResponseIsSuccessful();
        $this->assertNotEmpty($data);

        $linkData = \reset($data);
        $this->assertEquals($dto->getUrl(), $linkData['url']);
        $this->assertEquals($dto->getTitle(), $linkData['title']);
        $this->assertEquals($dto->getTags(), $linkData['tags']);
    }

    public function testListActionReturnsFilteredLinks()
    {
        $em = $this->em;

        $googleDTO = new LinkDTO();
        $googleDTO->setUrl('https://google.com');
        $googleDTO->setTitle('google');
        $googleDTO->setTags(['google', 'search']);
        $googleLink = $this->addCommand->add($googleDTO);

        $yandexDTO = new LinkDTO();
        $yandexDTO->setUrl('https://yandex.ru');
        $yandexDTO->setTitle('yandex');
        $yandexDTO->setTags(['yandex', 'search']);
        $yandexLink = $this->addCommand->add($yandexDTO);

        $this->client->request(Request::METHOD_GET, '/links', [
            'title' => 'google',
            'tag'   => 'search',
        ]);

        $link = $em->find(LinkEntity::class, $googleLink->getId());
        if ($link) {
            $em->remove($link);
            $em->flush();
        }

        $link = $em->find(LinkEntity::class, $yandexLink->getId());
        if ($link) {
            $em->remove($link);
            $em->flush();
        }

        $response = $this->client->getResponse();
        $data = \json_decode($response->getContent(), true);

        $this->assertResponseIsSuccessful();
        $this->assertNotEmpty($data);
        $this->assertCount(1, $data);

        $linkData = \reset($data);
        $this->assertEquals($googleDTO->getUrl(), $linkData['url']);
        $this->assertEquals($googleDTO->getTitle(), $linkData['title']);
        $this->assertEquals($googleDTO->getTags(), $linkData['tags']);
    }

    public function testLinkCanBeCreated()
    {
        $em = $this->em;

        $this->client->request(Request::METHOD_POST, '/links', [], [], [], \json_encode([
            'long_url' => 'https://google.com',
            'title'    => 'title',
            'tags'     => ['google', 'search'],
        ]));

        $response = $this->client->getResponse();
        $data = \json_decode($response->getContent(), true);

        /** @var ?LinkEntity $link */
        $link = null;
        if (isset($data['processedLinks'])) {
            foreach ($data['processedLinks'] as $linkId) {
                $link = $em->find(LinkEntity::class, $linkId);
                if ($link) {
                    $em->remove($link);
                    $em->flush();
                }
            }
        }

        $this->assertResponseIsSuccessful();
        $this->assertCount(1, $data['processedLinks']);
        $this->assertNotNull($link);

        $this->assertEquals('https://google.com', $link->getUrl());
        $this->assertEquals('title', $link->getTitle());
        $this->assertEquals(['google', 'search'], $link->getTags());
    }

    public function testLinksCanBeCreatedByBatch()
    {
        $em = $this->em;

        $this->client->request(Request::METHOD_POST, '/links', [], [], [], \json_encode([
            [
                'long_url' => 'https://google.com',
                'title'    => 'title',
                'tags'     => ['google', 'search'],
            ],
            [
                'long_url' => 'https://yandex.com',
                'title'    => 'title',
                'tags'     => ['yandex', 'search'],
            ],
        ]));

        $response = $this->client->getResponse();
        $data = \json_decode($response->getContent(), true);

        if (isset($data['processedLinks'])) {
            foreach ($data['processedLinks'] as $linkId) {
                $link = $em->find(LinkEntity::class, $linkId);
                if ($link) {
                    $em->remove($link);
                    $em->flush();
                }
            }
        }

        $this->assertResponseIsSuccessful();
        $this->assertCount(2, $data['processedLinks']);
    }

    public function testLinkCanBeUpdated()
    {
        $em = $this->em;

        $dto = new LinkDTO();
        $dto->setUrl('https://google.com');
        $dto->setTitle('Title');

        $link = $this->addCommand->add($dto);

        $this->client->request(Request::METHOD_PATCH, '/links/' . $link->getId(), [], [], [], \json_encode([
            'long_url' => 'https://yandex.ru',
            'title'    => 'another title',
            'tags'     => ['google', 'search'],
        ]));

        $link = $em->find(LinkEntity::class, $link->getId());
        if ($link) {
            $em->remove($link);
            $em->flush();
        }

        $response = $this->client->getResponse();
        $data = \json_decode($response->getContent(), true);

        $this->assertResponseIsSuccessful();
        $this->assertNotEmpty($data['processedLinks']);
        $this->assertNotNull($link);

        $this->assertEquals('https://yandex.ru', $link->getUrl());
        $this->assertEquals('another title', $link->getTitle());
        $this->assertEquals(['google', 'search'], $link->getTags());
    }

    public function testLinkCanBeDeleted()
    {
        $em = $this->em;

        $dto = new LinkDTO();
        $dto->setUrl('https://google.com');
        $dto->setTitle('Title');
        $dto->setTags(['google', 'search']);

        $link = $this->addCommand->add($dto);
        $linkId = $link->getId();

        $this->client->request(Request::METHOD_DELETE, '/links/' . $linkId);

        $link = $em->find(LinkEntity::class, $linkId);
        if ($link) {
            $em->remove($link);
            $em->flush();
        }

        $this->assertResponseIsSuccessful();
        $this->assertNull($link);
    }

    public function testDetailsResponseContainsCorrectData()
    {
        $em = $this->em;

        $dto = new LinkDTO();
        $dto->setUrl('https://google.com');
        $dto->setTitle('title');
        $dto->setTags(['google', 'search']);

        $link = $this->addCommand->add($dto);
        $linkId = $link->getId();

        $this->client->request(Request::METHOD_GET, '/links/' . $linkId);

        $response = $this->client->getResponse();
        $data = \json_decode($response->getContent(), true);

        $link = $em->find(LinkEntity::class, $linkId);
        if ($link) {
            $em->remove($link);
            $em->flush();
        }

        $this->assertResponseIsSuccessful();
        $this->assertEquals('https://google.com', $data['url']);
        $this->assertEquals('title', $data['title']);
        $this->assertEquals(['google', 'search'], $data['tags']);
    }

    public function testLinkVisitingRedirectsToUrl()
    {
        $em = $this->em;

        $dto = new LinkDTO();
        $dto->setUrl('https://google.com');
        $dto->setTitle('Title');

        $link = $this->addCommand->add($dto);

        $this->client->request(Request::METHOD_GET, '/links/visit/' . $link->getShortUrl());

        $link = $em->find(LinkEntity::class, $link->getId());
        if ($link) {
            $em->remove($link);
            $em->flush();
        }

        $response = $this->client->getResponse();

        $this->assertTrue($response->isRedirect('https://google.com'));
    }
}
